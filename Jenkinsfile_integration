pipeline {
    agent {
        node {
            label 'java8'
        }
    }
    triggers {
        cron('H */30 * * 1-5')
    }
    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/voyages-sncf-technologies/hesperides.git', branch: 'feature/springboot'
            }
        }
        stage('Build & test') {
            steps {
                withMaven(mavenSettingsConfig: 'global_maven_settings') {
                    sh 'env'
                    //sh 'export MAVEN_OPTS="-gs $GLOBAL_MVN_SETTINGS" && ./mvnw help:effective-settings'
                 //   sh 'export MAVEN_OPTS="-Dhttp.proxyHost=proxy-lil -Dhttp.proxyPort=80 -Dhttps.proxyHost=proxy-lil -Dhttps.proxyPort=80" && ./mvnw clean package -U --global-settings $GLOBAL_MVN_SETTINGS '
                    sh ' ./mvnw clean package -U '
                }
                sh 'ls'
                stash name: 'workspace', includes: '*'
            }
        }
        /*stage('Upload to Nexus') {
            steps {
                withMaven(mavenSettingsConfig: 'global_maven_settings') {
                    sh './mvnw clean deploy -DskipTests -U'
                }
            }
        }*/
        stage('Build image docker') {
            agent {
                node {
                    label 'docker'
                }
            }
            steps {
                script {
                    docker.withRegistry("http://docker-vsct.pkg.cloud.socrate.vsct.fr") {
                        unstash 'workspace'
                        sh "ls"
                        sh "docker login --username admgit --password '7meJ%G\$2' --email deploy@build.fr docker-vsct.pkg.cloud.socrate.vsct.fr"
                        sh "docker build --build-arg http_proxy=http://proxy-hpr:80 --build-arg https_proxy=https://proxy-hpr:80 . -t hesperides/hesperides-spring:latest-snapshot"
                        dockerImage = docker.image("hesperides/hesperides-spring:latest-snapshot")
                        dockerImage.push()
                    }
                }
            }
        }
        /*stage('Analyse Sonar') {
            steps {
                withMaven(mavenSettingsConfig: 'global_maven_settings') {
                    sh "./mvnw help:effective-settings"
                    sh './mvnw clean compile'
                    sh './mvnw org.sonarsource.scanner.maven:sonar-maven-plugin:3.2:sonar'
                }
            }
        }*/
    }
    post {
        always {
            deleteDir()
        }
    }
}
