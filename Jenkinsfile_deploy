#!groovy

@Library(["rundeck@2.1.5", "toolbox-yaml"]) _

app = "HES"
node {
    platformsList = String.join("\n", toolbox.getEnvironments(app))
}
pipeline {
    agent {
        node {
            label 'default||master'
        }
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }
    parameters {
        choice(choices: platformsList, name: "PLATFORM", description: "OBLIGATOIRE : Plateforme sur laquelle sera fait le déploiement")
    }
    stages {
        stage('Initialisation des Paramètres') {
            steps {
                script {
                    // Set params as they will be used later
                    dockers = horsprodtoolbox.yPath("/${app}/${params.PLATFORM}/DOCKER")
                    dockersJson = readJSON text: "${dockers}"
                }
            }
        }
        stage('Deploy docker image') {
            steps {
                script {
                    for (docker in dockersJson['result']) {
                        for (host in docker['HOSTS']) {
                            Map optionsRundeck = [
                                    refresh_puppet_agent: "Complet",
                                    serveur             : [host['NAME'].toLowerCase()]
                            ]
                            devrundeck.startAndWaitWithAutofill("HES", "Outils/refresh_puppet_agent", optionsRundeck)
                        }
                    }

                }
            }
        }
        stage('Restart docker image') {
            steps {
                script {
                    for (docker in dockersJson['result']) {
                        for (host in docker['HOSTS']) {
                            for (instance in host['INSTANCES']) {
                                Map optionsRundeck = [
                                        composant  : "DOCKER-${docker["IMAGE"]}",
                                        instances  : instance['NAME'],
                                        trigramme  : app,
                                        techno     : "DOCKER",
                                        TargetNodes: "${app}${params.PLATFORM}DOCKER${docker["IMAGE"]}-${host['NAME']}",
                                        plateforme : platform,
                                        serveur    : host['NAME'].toLowerCase(),


                                ]
                                devrundeck.startAndWaitWithAutofill("HES", "Outils/RESTART", optionsRundeck)
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            deleteDir()
        }
    }
}
