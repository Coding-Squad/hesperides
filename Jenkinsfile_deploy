#!groovy

@Library(["rundeck", "toolbox-yaml"]) _

pipeline {
    agent {
        node {
            label 'default||master'
        }
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
    }
    triggers {
        cron('0 2 * * 1-5')
    }
    parameters {
        string(name: 'DOCKER_TAG', defaultValue: 'latest',    description: 'latest ou yyyy-MM-dd')
        // Le premier choix est utilisé comme valeur par défaut, y compris lors de l'exécution cronnée :
        choice(name: 'PLATFORM',   choices: ['PRD1', 'REL1'], description: 'OBLIGATOIRE : Plateforme sur laquelle sera fait le déploiement')
    }
    stages {
        stage('Tag & push Docker image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'artifact_admin', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh "docker login --username ${USERNAME} --password '${PASSWORD}' hesperides-docker-all.artifact.cloud.socrate.vsct.fr"
                    sh "docker tag hesperides-docker-all.artifact.cloud.socrate.vsct.fr/hesperides/vsct-hesperides:${params.DOCKER_TAG} hesperides-docker-all.artifact.cloud.socrate.vsct.fr/hesperides/vsct-hesperides:${params.PLATFORM}"
                    sh "docker push hesperides-docker-all.artifact.cloud.socrate.vsct.fr/hesperides/vsct-hesperides:${params.PLATFORM}"
                }
            }
        }
        stage('Initialisation des Paramètres') {
            steps {
                script {
                    // Set params as they will be used later
                    platformContainers = readJSON(text: horsprodtoolbox.yPath("/HES/${params.PLATFORM}/DOCKER").toString()).result  // http://toolbox-server.socrate.vsct.fr/horsprod/api/toolbox?function=ypath&args=/HES/REL1/DOCKER
                    dockerHosts = platformContainers.HOSTS.collect { it.NAME } as Set

                    // Set user
                    wrap([$class: 'BuildUser']) {
                        user = env.BUILD_USER_ID ?: 'jenkins'
                    }
                    pprundeck.setRundeckUser(user)
                    // Set up Rundeck token
                    withCredentials([string(credentialsId: 'pprundeck', variable: 'TOKEN')]) {
                        pprundeck.setRundeckToken(TOKEN)
                    }
                }
            }
        }
        stage('Deploy Docker image') {
            steps {
                script {
                    dockerHosts.each { host ->
                        Map optionsRundeck = [
                                refresh_puppet_agent: "complet",
                                serveur             : [host[0].toLowerCase()]
                        ]
                        pprundeck.startAndWaitWithAutofill("HES", "Outils/refresh_puppet_agent", optionsRundeck)
                    }
                }
            }
        }
        stage('Restart Docker image') {
            steps {
                script {
                    for (dockerContainer in platformContainers) {
                        for (host in dockerContainer.HOSTS) {
                            for (instance in host['INSTANCES']) {
                                Map optionsRundeck = [
                                        composant  : "DOCKER-${dockerContainer.IMAGE}",
                                        instances  : instance.NAME,
                                        trigramme  : 'HES',
                                        techno     : "DOCKER",
                                        TargetNodes: "HES${params.PLATFORM}DOCKER${dockerContainer.IMAGE}-${host.NAME}",
                                        plateforme : params.PLATFORM,
                                        serveur    : host.NAME.toLowerCase(),
                                ]
                                pprundeck.startAndWaitWithAutofill("HES", "Outils/RESTART", optionsRundeck)
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            deleteDir()
        }
    }
}
