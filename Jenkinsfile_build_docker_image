#!groovy

@Library(["notifications"]) _

import java.text.SimpleDateFormat

pipeline {
    agent {
        node {
            label 'docker'
        }
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }
    triggers {
        // Le repo GitHub est bien surveillé, et non celui contenant ce Jenkinsfile
        // -> c'est documenté ici: https://github.com/jenkinsci/workflow-scm-step-plugin/blob/master/README.md#changelogs
        // "Jenkins will automatically remember the SCMs run in the last build of the project"
        pollSCM('H */5 * * 1-5')
    }
    environment {
        DATE = (new SimpleDateFormat("yyyy-MM-dd")).format(new Date())
    }
    parameters {
        string(name: 'GIT_BRANCH', defaultValue: 'develop', description: 'identify source code version')
    }
    stages {
        stage('Build Docker image') {
            steps {
                dir ('hesperides') {
                    git(url: 'https://github.com/voyages-sncf-technologies/hesperides',
                        branch: params.GIT_BRANCH)
                }
                script {
                    // On complète le Dockerfile pour inclure les fichiers settings.xml & globalSettings.xml durant le build Maven,
                    // ainsi que les certifcats dans l'image finale :
                    sh 'sed -i "1 r vsct-hesperides/Dockerfile.prepend" hesperides/Dockerfile && rm vsct-hesperides/Dockerfile.prepend'
                    sh 'cat vsct-hesperides/Dockerfile.append >> hesperides/Dockerfile && rm vsct-hesperides/Dockerfile.append'
                    sh 'cp -r vsct-hesperides/* hesperides/'
                    // On définit les labels et on passe les variables d'environnement des proxys HTTP
                    def proxyBuildArgs = "--build-arg http_proxy --build-arg https_proxy"
                    def hesperidesGitCommit = sh(returnStdout: true, script: 'cd hesperides && git rev-parse --short HEAD').trim()
                    def labelArgs = "--label git_commit=${hesperidesGitCommit} --label tuyauterie_git_commit=${GIT_COMMIT} --label date=${DATE}"
                    // On build l'image Docker :
                    withMaven(globalMavenSettingsConfig: 'global_maven_settings', mavenSettingsConfig: 'local_maven_settings') { // use https://artifact.socrate.vsct.fr/artifactory/all-mvn as a mirror
                        sh 'cp $MVN_SETTINGS hesperides/settings.xml'
                        sh 'cp $GLOBAL_MVN_SETTINGS hesperides/globalSettings.xml'
                        sh "docker build --no-cache --pull ${labelArgs} ${proxyBuildArgs} ./hesperides -t hesperides-docker-all.artifact.cloud.socrate.vsct.fr/hesperides/vsct-hesperides:${env.DATE}"
                    }
                    // On affiche tous les labels de l'image générée :
                    sh "docker inspect --format '{{.ContainerConfig.Labels}}' hesperides-docker-all.artifact.cloud.socrate.vsct.fr/hesperides/vsct-hesperides:${env.DATE}"
                    // On publie l'image sur artifactory :
                    withCredentials([usernamePassword(credentialsId: 'artifact_admin', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        sh "docker login --username ${USERNAME} --password '${PASSWORD}' hesperides-docker-all.artifact.cloud.socrate.vsct.fr"
                        sh "docker push hesperides-docker-all.artifact.cloud.socrate.vsct.fr/hesperides/vsct-hesperides:${env.DATE}"
                        sh "docker tag hesperides-docker-all.artifact.cloud.socrate.vsct.fr/hesperides/vsct-hesperides:${env.DATE} hesperides-docker-all.artifact.cloud.socrate.vsct.fr/hesperides/vsct-hesperides:latest"
                        sh "docker push hesperides-docker-all.artifact.cloud.socrate.vsct.fr/hesperides/vsct-hesperides:latest"
                    }
                }
            }
        }
        stage('Trigger deploy to REL1') {
            steps {
                build job: "deploy", parameters: [string(name: 'DOCKER_TAG', value: "latest"),
                                                  string(name: 'DOCKER_TAG', value: "REL1")]
            }
        }
    }
    post {
        always {
            deleteDir()
        }
    }
}
