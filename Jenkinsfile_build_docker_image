#!groovy

@Library(["notifications"]) _

/**
 * Pipeline de création de l'image Docker pour VSCT :
 * Construit l'image Docker à partir du repo Github
 * en ajoutant le certificat de l'Active Directory,
 * pui la push vers le dépôt VSCT (Artifactory).
 */

pipeline {
    agent {
        node {
            label 'docker'
        }
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }
    triggers {
        // BEFORE deploy crons
        cron('0 1 * * 1-5')
    }
    parameters {
        string(name: 'GIT_BRANCH', defaultValue: 'develop', description: 'identify source code version')
        string(name: 'DOCKER_TAG', defaultValue: 'develop', description: 'Branch or version tag starting with a "v"')
    }
    stages {
        stage('Build docker image') {
            steps {
                dir ('hesperides') {
                    git(url: 'https://github.com/voyages-sncf-technologies/hesperides',
                        branch: params.GIT_BRANCH)
                }
                script {
                    withCredentials([usernamePassword(credentialsId: 'usl_ci', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        sh "docker login --username ${USERNAME} --password '${PASSWORD}' hesperides-docker-all.artifact.cloud.socrate.vsct.fr"
                        sh 'sed -i "/FROM / r vsct-hesperides/Dockerfile.prepend" hesperides/Dockerfile && rm vsct-hesperides/Dockerfile.prepend'
                        sh 'cat vsct-hesperides/Dockerfile.append >> hesperides/Dockerfile && rm vsct-hesperides/Dockerfile.append'
                        sh 'cp -r vsct-hesperides/* hesperides/'
                        withMaven(globalMavenSettingsConfig: 'global_maven_settings', mavenSettingsConfig: 'local_maven_settings') { // use https://artifact.socrate.vsct.fr/artifactory/all-mvn as a mirror
                            sh 'cp $MVN_SETTINGS hesperides/settings.xml'
                            sh 'cp $GLOBAL_MVN_SETTINGS hesperides/globalSettings.xml'
                            def proxyBuildArgs = "--build-arg http_proxy=${http_proxy} --build-arg https_proxy=${http_proxy} --build-arg DOCKER_TAG=${params.DOCKER_TAG}"
                            def hesperidesGitCommit = sh(returnStdout: true, script: 'cd hesperides && git rev-parse --short HEAD').trim()
                            def labelArgs = "--label git_commit=${hesperidesGitCommit} --label tuyauterie_git_commit=${GIT_COMMIT}"
                            sh "docker build --no-cache --pull ${labelArgs} ${proxyBuildArgs} ./hesperides -t hesperides-docker-all.artifact.cloud.socrate.vsct.fr/hesperides/vsct-hesperides:${params.DOCKER_TAG}"
                        }
                        // Displaying all the labels of the image:
                        sh "docker inspect --format '{{.ContainerConfig.Labels}}' hesperides-docker-all.artifact.cloud.socrate.vsct.fr/hesperides/vsct-hesperides:${params.DOCKER_TAG}"
                        sh "docker push hesperides-docker-all.artifact.cloud.socrate.vsct.fr/hesperides/vsct-hesperides:${params.DOCKER_TAG}"
                    }
                }
            }
        }
    }
    post {
        always {
            deleteDir()
        }
    }
}
