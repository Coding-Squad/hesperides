#!groovy

@Library(["github"]) _

import groovy.json.JsonSlurperClassic

pipeline {
    agent {
        node {
            label 'maven3'
        }
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }
    parameters {
        string(name: 'RELEASE_VERSION', description: 'Release Version')
    }
    stages {
        stage('Validate parameters') {
            when {
                expression { params.RELEASE_VERSION.startsWith('v') }
            }
            steps {
                error("RELEASE_VERSION must not start with a v !")
            }
        }
        stage("Pull Project") {
            steps {
                script {
                    git(url: 'https://github.com/voyages-sncf-technologies/hesperides.git',
                        credentialsId: 'github-hesperides-adm',
                        branch: 'develop')
                }
            }
        }
        stage("Create release branch") {
            steps {
                script {
                    withMaven(mavenSettingsConfig: 'global_maven_settings') {
                        withMaven(mavenSettingsConfig: 'local_maven_settings') { // use https://artifact.socrate.vsct.fr/artifactory/all-mvn as a mirror
                            sh "mvn help:effective-settings"
                            // La commande suivante crée la branche git release/${params.RELEASE_VERSION}
                            sh "mvn -B gitflow:release-start -DreleaseVersion=${params.RELEASE_VERSION}"
                        }
                    }
                    withCredentials([usernamePassword(credentialsId: 'github-hesperides-adm', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        sh "git config user.name \"hesperides-adm\""
                        sh "git push https://${USERNAME}:${PASSWORD}@github.com/voyages-sncf-technologies/hesperides.git release/${params.RELEASE_VERSION}"
                    }
                }
            }
        }
        stage('Create tags on 3 projects') {
            steps {
                script {
                    // En cas d'erreur HTTP 422 ici, c'est probablement que le tag existe déjà...
                    withCredentials([string(credentialsId: 'github-hesperides-adm-token', variable: 'TOKEN_ID')]) {
                        github.authenticate organization: 'voyages-sncf-technologies', project: 'hesperides', token: "${TOKEN_ID}"
                        github.createRelease tag: "v${params.RELEASE_VERSION}", branch: "release/${params.RELEASE_VERSION}", description: "${params.RELEASE_VERSION}", draft: false, prerelease: false
                        github.authenticate organization: 'voyages-sncf-technologies', project: 'hesperides-data-migration', token: "${TOKEN_ID}"
                        github.createRelease tag: "v${params.RELEASE_VERSION}", branch: "master", description: "${params.RELEASE_VERSION}", draft: false, prerelease: false
                    }
                    withCredentials([string(credentialsId: 'gitlab_api_token', variable: 'GITLAB_API_TOKEN')]) {
                        httpRequest(httpMode: 'POST',
                                    url: "https://gitlab.socrate.vsct.fr/api/v4/projects/hesperides%2Fteeproxy/repository/tags?private_token=${GITLAB_API_TOKEN}" +
                                         "&ref=master&tag_name=${params.RELEASE_VERSION}")
                    }
                }
            }
        }
        stage('Merge and push release branch on develop and master') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'github-hesperides-adm', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        sh "git config user.name hesperides-adm"
                        sh "git checkout develop"
                        sh "git merge release/${params.RELEASE_VERSION}"
                        sh "sed -i 's~<version>${params.RELEASE_VERSION}</version>~<version>${params.RELEASE_VERSION}-SNAPSHOT</version>~' pom.xml */pom.xml */*/pom.xml"
                        sh "git commit -am 'Version bump to ${params.RELEASE_VERSION}-SNAPSHOT'"
                        sh "git push https://${USERNAME}:${PASSWORD}@github.com/voyages-sncf-technologies/hesperides.git"
                        sh "git checkout master"
                        sh "git merge release/${params.RELEASE_VERSION}"
                        sh "git push https://${USERNAME}:${PASSWORD}@github.com/voyages-sncf-technologies/hesperides.git"
                    }
                }
            }
        }
        stage('Trigger teeproxy image generation for this release') {
            steps {
                build job: "../teeproxy/build_docker_image", parameters: [[$class: 'StringParameterValue', name: 'DOCKER_TAG', value: "v${params.RELEASE_VERSION}"]]
            }
        }
        stage('Trigger hesperides-data-migration image generation for this release') {
            steps {
                build job: "../data-migration/build_docker_image", parameters: [[$class: 'StringParameterValue', name: 'DOCKER_TAG', value: "v${params.RELEASE_VERSION}"]]
            }
        }
        stage('Trigger hesperides image generation for this release') {
            steps {
                timeout(time: 900, unit: 'SECONDS') {
                    waitUntil {   // We wait for Travis CI to build the Docker image with the new tag
                        sleep 10  // to avoid hitting Docker hub API too frequently
                        script {
                            def tags = new JsonSlurperClassic().parseText(httpRequest(httpProxy: env.http_proxy, url: 'https://registry.hub.docker.com/v1/repositories/hesperides/hesperides/tags').content)
                            return tags.any { it.name == "v${params.RELEASE_VERSION}" }
                        }
                    }
                }
                build job: "build_docker_image", parameters: [[$class: 'StringParameterValue', name: 'DOCKER_TAG', value: "v${params.RELEASE_VERSION}"]]
            }
        }
    }

    post {
        always {
            deleteDir()
            cleanWs()
        }
    }
}
