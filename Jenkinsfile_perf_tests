#!groovy

@Library(["toolbox-yaml"]) _

node {
    platformsList = horsprodtoolbox.getEnvironments('HES').join('\n')
}
pipeline {
    agent {
        node {
            label 'maven3'
        }
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }
    parameters {
        string(name: 'auth', defaultValue: 'hesperides', description: """user:password (ex: "tech:password") ou simplement un credentialsId d'où tirer le user/password""")
        choice(name: "platform", choices: platformsList, description: 'Plateforme sur laquelle sera fait le test de charge')
        choice(name: "container", choices: ['teeproxy', 'hesperides'])
        string(name: 'duration', defaultValue: '60seconds', description: 'Une phase de "warmup" de 20s est systématiquement effectuée au préalable')
        string(name: 'usersPerSecond', defaultValue: '20')
        string(name: 'percentOkMin', defaultValue: '99', description: "% d'appels qui doivent être OK pour que le test soit un succès")
        string(name: 'percentile99ResponseTimeMax', defaultValue: '500', description: "temps de réponse max acceptable (en ms) pour l'ensemble des 1% des requêtes les plus lentes")
    }
    stages {
        stage('Pull Project') {
            steps {
                script {
                    git(url: 'https://github.com/voyages-sncf-technologies/hesperides.git',
                        branch: 'develop')

                    platformContainers = readJSON(text: horsprodtoolbox.yPath("/HES/${params.platform}/DOCKER").toString()).result  // http://toolbox-server.socrate.vsct.fr/horsprod/api/toolbox?function=ypath&args=/HES/REL1/DOCKER
                    host = platformContainers.find { it.IMAGE.contains('/'+params.container+':') }.HOSTS[0]
                    hostPort = "${host.NAME.toLowerCase()}:${host.INSTANCES[0].PORTS[0].split(':')[0]}"

                    if (params.auth.contains(':')) {
                        auth = params.auth
                    } else {
                        withCredentials([usernamePassword(credentialsId: params.auth, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                            auth = "${env.USERNAME}:${env.PASSWORD}"
                        }
                    }

                    mvn_cmd = "mvn -f tests/perfs/pom.xml gatling:execute -Pgatling -Dgatling.simulationClass=HesperidesApi -DbaseUrl=http://${hostPort}/rest -Dauth=${auth} " +
                              "-DusersPerSecond=${params.usersPerSecond} -DpercentOkMin=${params.percentOkMin} -Dpercentile99ResponseTimeMax=${params.percentile99ResponseTimeMax}"
                }
            }
        }

        stage("Warmup de l'appli") {
            steps {
                withMaven(mavenSettingsConfig: 'global_maven_settings') {
                    withMaven(mavenSettingsConfig: 'local_maven_settings') { // use https://artifact.socrate.vsct.fr/artifactory/all-mvn as a mirror
                        sh "${mvn_cmd} -Dduration=20seconds || true"
                    }
                }
            }
        }
        
        stage('Gatling stress test') {
            steps {
                withMaven(mavenSettingsConfig: 'global_maven_settings') {
                    withMaven(mavenSettingsConfig: 'local_maven_settings') { // use https://artifact.socrate.vsct.fr/artifactory/all-mvn as a mirror
                        sh "${mvn_cmd} -Dduration=${params.duration}"
                    }
                }
            }
        }
    }
}
